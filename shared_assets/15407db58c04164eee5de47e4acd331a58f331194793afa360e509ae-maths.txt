.. _iris.analysis.maths:

===================
iris.analysis.maths
===================



.. currentmodule:: iris

.. automodule:: iris.analysis.maths

In this module:

 * :py:obj:`abs`
 * :py:obj:`add`
 * :py:obj:`apply_ufunc`
 * :py:obj:`divide`
 * :py:obj:`exp`
 * :py:obj:`exponentiate`
 * :py:obj:`intersection_of_cubes`
 * :py:obj:`log`
 * :py:obj:`log10`
 * :py:obj:`log2`
 * :py:obj:`multiply`
 * :py:obj:`subtract`
 * :py:obj:`IFunc`



.. autofunction:: iris.analysis.maths.abs


.. raw:: html

    <p class="hr_p"><a href="#">&uarr;&#32&#32 top &#32&#32&uarr;</a></p>
    <!--

-----------

.. raw:: html

    -->


.. autofunction:: iris.analysis.maths.add


.. raw:: html

    <p class="hr_p"><a href="#">&uarr;&#32&#32 top &#32&#32&uarr;</a></p>
    <!--

-----------

.. raw:: html

    -->


.. autofunction:: iris.analysis.maths.apply_ufunc


.. raw:: html

    <p class="hr_p"><a href="#">&uarr;&#32&#32 top &#32&#32&uarr;</a></p>
    <!--

-----------

.. raw:: html

    -->


.. autofunction:: iris.analysis.maths.divide


.. raw:: html

    <p class="hr_p"><a href="#">&uarr;&#32&#32 top &#32&#32&uarr;</a></p>
    <!--

-----------

.. raw:: html

    -->


.. autofunction:: iris.analysis.maths.exp


.. raw:: html

    <p class="hr_p"><a href="#">&uarr;&#32&#32 top &#32&#32&uarr;</a></p>
    <!--

-----------

.. raw:: html

    -->


.. autofunction:: iris.analysis.maths.exponentiate


.. raw:: html

    <p class="hr_p"><a href="#">&uarr;&#32&#32 top &#32&#32&uarr;</a></p>
    <!--

-----------

.. raw:: html

    -->


.. autofunction:: iris.analysis.maths.intersection_of_cubes


.. raw:: html

    <p class="hr_p"><a href="#">&uarr;&#32&#32 top &#32&#32&uarr;</a></p>
    <!--

-----------

.. raw:: html

    -->


.. autofunction:: iris.analysis.maths.log


.. raw:: html

    <p class="hr_p"><a href="#">&uarr;&#32&#32 top &#32&#32&uarr;</a></p>
    <!--

-----------

.. raw:: html

    -->


.. autofunction:: iris.analysis.maths.log10


.. raw:: html

    <p class="hr_p"><a href="#">&uarr;&#32&#32 top &#32&#32&uarr;</a></p>
    <!--

-----------

.. raw:: html

    -->


.. autofunction:: iris.analysis.maths.log2


.. raw:: html

    <p class="hr_p"><a href="#">&uarr;&#32&#32 top &#32&#32&uarr;</a></p>
    <!--

-----------

.. raw:: html

    -->


.. autofunction:: iris.analysis.maths.multiply


.. raw:: html

    <p class="hr_p"><a href="#">&uarr;&#32&#32 top &#32&#32&uarr;</a></p>
    <!--

-----------

.. raw:: html

    -->


.. autofunction:: iris.analysis.maths.subtract


.. raw:: html

    <p class="hr_p"><a href="#">&uarr;&#32&#32 top &#32&#32&uarr;</a></p>
    <!--

-----------

.. raw:: html

    -->


Class for functions that can be applied to an iris cube.

Example usage 1:: Using an existing numpy ufunc, such as numpy.sin for the data
    function and a simple lambda function for the units function.

    sine_ifunc = iris.analysis.maths.IFunc(numpy.sin, 
                                         lambda cube: iris.unit.Unit('1'))
    sine_cube = sine_ifunc(cube)

Example usage 2:: Define a function for the data arrays of two cubes
    and define a units function that checks the units of the cubes for consistency,
    before giving the resulting cube the same units as the first cube.

    def ws_data_func(u_data, v_data):
        return numpy.sqrt( u_data**2 + v_data**2 )

    def ws_units_func(u_cube, v_cube):
        if u_cube.units != getattr(v_cube, 'units', u_cube.units):
            raise ValueError("units do not match")
        return u_cube.units

    ws_ifunc = iris.analysis.maths.IFunc(ws_data_func, ws_units_func)
    ws_cube = ws_ifunc(u_cube, v_cube, new_name='wind speed')

Example usage 3:: Using a data function that allows a keyword argument.

    cs_ifunc = iris.analysis.maths.IFunc(numpy.cumsum,
               lambda a: a.units
               )
    cs_cube = cs_ifunc(cube, axis=1)

..

    .. autoclass:: iris.analysis.maths.IFunc
        :members:
        :undoc-members:
        :inherited-members:

